name: Astro monitor build for Linux arm64

on:
  push:
    branches: [ main ]
    tags: v*
    path-ignore:
      - README.md
      - install.sh

  pull_request:
    branches: [ main ]
    path-ignore:
      - README.md
      - install.sh

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: aarch64-unknown-linux-gnu # raspberry 64bit
            OS: ubuntu-latest
            SHORT_NAME: arm64
          - TARGET: aarch64-unknown-linux-musl # raspberry 64bit
            OS: ubuntu-latest
            SHORT_NAME: arm64-musl

    runs-on: ubuntu-latest
    env:
      NAME: astromonitor
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      SHORT_NAME: ${{ matrix.SHORT_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu_latest
          setup: |
            mkdir -p "${PWD}/artifacts"
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          run: |
            # dependencies are only needed on ubuntu as that's the only place where
            # we make cross-compilation
            apt-get update && apt-get install musl-tools
            # some additional configuration for cross-compilation on linux
            cat >>~/.cargo/config <<EOF
            [target.aarch64-unknown-linux-gnu]
            linker = "aarch64-linux-gnu-gcc"
            [target.aarch64-unknown-linux-musl]
            linker = "aarch64-linux-musl-gcc"
            EOF
            rustup target add $TARGET
            rcargo build --release --verbose --target $TARGET
            mkdir -p ./artifacts
            EXEC=$NAME
            if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
            else
            TAG=$GITHUB_SHA
            fi
            mv ./target/$TARGET/release/$EXEC ./$EXEC
            tar -czf ./artifacts/$NAME-$SHORT_NAME-$TAG.tar.gz $EXEC
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: result
          path: |
            ./artifacts
  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: result
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*.tar.gz
