name: Astro monitor build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags: v*
    paths-ignore:
      - README.md
      - install.sh

  pull_request:
    branches: [ main ]
    paths-ignore:
      - README.md
      - install.sh

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: x86_64-unknown-linux-gnu # tested in a debian container on a mac
            OS: ubuntu-latest
            SHORT_NAME: linux-amd64
          - TARGET: x86_64-unknown-linux-musl # tested in a debian container on a mac
            OS: ubuntu-latest
            SHORT_NAME: linux-amd64-musl

    runs-on: ${{ matrix.OS }}
    env:
      NAME: astromonitor
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      SHORT_NAME: ${{ matrix.SHORT_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: Pull deps
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get install -qq build-crossbuild-essential-arm64 crossbuild-essential-armhf musl-tools
          fi
          wget https://musl.cc/aarch64-linux-musl-cross.tgz
          tar -xvzf aarch64-linux-musl-cross.tgz
          mv aarch64-linux-musl-cross/bin/* /usr/local/bin
          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-musl-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-musleabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-musleabihf-gcc"
          [target.x86_64-unknown-linux-musl]
          linker = "musl-gcc"
          EOF
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: cargo build --release --verbose --target $TARGET
      - name: List target
        run: find ./target
      - name: Compress
        run: |
          mkdir -p ./artifacts
          EXEC=$NAME
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$EXEC ./$EXEC
          tar -czf ./artifacts/$NAME-$SHORT_NAME-$TAG.tar.gz $EXEC
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: result
          path: |
            ./artifacts
  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: result
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*.tar.gz
